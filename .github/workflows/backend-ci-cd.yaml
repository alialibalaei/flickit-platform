name: CI/CD Backend

on:
  push:
    branches:
      - '*'
    paths:
      - backend/**
    tags:
      - '*'

  pull_request:
    branches:
      - '*'
    paths:
      - backend/**


jobs:
  Build_Backend:
    runs-on: ubuntu-latest
    steps:
      - uses: dorny/paths-filter@v2
        id: changes
        with:
        filters: |
          src:
            - 'backend/**'
      - if: steps.changes.outputs.src == 'true'
        run : 
      - uses: actions/checkout@v2
      - name: build
        run: docker build -t backend ./backend


  Backend_Test:
    needs: Build_Backend
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github_actions
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
    - name: Run migrations
      env: 
        SECRET_KEY: test-secret-key
        DEBUG_VALUE: False
      run: python backend/apps/manage.py migrate
    - name: Run tests
      env: 
        SECRET_KEY: test-secret-key
        DEBUG_VALUE: False
      run: pytest backend/apps


  Sonar:
    needs: [Backend_Test]
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github_actions
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
    - name: Install coverage
      run: |
        pip install coverage
    - name: Run migrations
      env: 
        SECRET_KEY: test-secret-key
        DEBUG_VALUE: False
      run: python backend/apps/manage.py migrate

    - name: Run tests with coverage
      env: 
        SECRET_KEY: test-secret-key
        DEBUG_VALUE: False
      run: |
        coverage run --omit='*/tests/*','*/migrations/*'  -m  pytest backend/apps
        coverage report
        coverage xml
    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GH_PACKAGES_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        COVERAGE_REPORT_PATH: 'coverage.xml'


  Backend_Push_Latest_Image:
    needs: Sonar
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: create image from repository
        run: docker build -t ghcr.io/avansoft/flickit-platform:latest ./backend
      - name: login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: avansoft
          password: ${{ secrets.GH_PACKAGES_TOKEN }}
      - name: push image to GitHub Container Registry
        run: docker push ghcr.io/avansoft/flickit-platform:latest

  Backend_Deploy_Latest:
    needs: Backend_Push_Latest_Image
    container: hamravesh.hamdocker.ir/public/darkube-cli:v1.1
    runs-on: ubuntu-latest
    steps:
      - name: Run script
        run: darkube deploy --ref main --token ${DARKUBE_DEPLOY_TOKEN} --app-id ${DARKUBE_APP_ID}  --image-tag "latest" --job-id "$GITHUB_RUN_ID" --stateless-app true
        env:
          DARKUBE_DEPLOY_TOKEN: ${{ secrets.DARKUBE_DEPLOY_TOKEN_BACKEND_STAGE }}
          DARKUBE_APP_ID: ${{ secrets.DARKUBE_APP_ID_BACKEND_STAGE }}    



  Backend_Push_Image:
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
    needs: Sonar
    runs-on: ubuntu-latest
    outputs:
      TAG: ${{ steps.TAG.outputs.tag }}
    steps:
      - uses: actions/checkout@v2
      - name: Set output
        id: TAG
        run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT
      - name: Check output
        env:
          RELEASE_VERSION: ${{ steps.TAG.outputs.tag }}
        run: |
          echo $RELEASE_VERSION
          echo ${{ steps.TAG.outputs.tag }}
      - name: login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: avansoft
          password: ${{ secrets.GH_PACKAGES_TOKEN }}
      - uses: actions/checkout@v2
      - name: create image from repository
        run: docker build -t ghcr.io/avansoft/flickit-platform:${{ steps.TAG.outputs.tag }} ./backend
      - name: push image to GitHub Container Registry
        run: docker push ghcr.io/avansoft/flickit-platform:${{ steps.TAG.outputs.tag }}

  Backend_Deploy:
    needs: Backend_Push_Image
    container: hamravesh.hamdocker.ir/public/darkube-cli:v1.1
    runs-on: ubuntu-latest
    steps:
      - name: Run script
        run: darkube deploy --ref main --token ${DARKUBE_DEPLOY_TOKEN} --app-id ${DARKUBE_APP_ID}  --image-tag "${TAG}" --job-id "$GITHUB_RUN_ID" --stateless-app true
        env:
          DARKUBE_DEPLOY_TOKEN: ${{ secrets.DARKUBE_DEPLOY_TOKEN_BACKEND }}
          DARKUBE_APP_ID: ${{ secrets.DARKUBE_APP_ID_BACKEND }}
          TAG: ${{needs.Backend_Push_Image.outputs.TAG}}

  
